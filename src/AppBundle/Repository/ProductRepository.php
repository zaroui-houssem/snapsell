<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Symfony\Component\Validator\Constraints\Count;


/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function findNearProduits($latitude,$longitude){

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('AppBundle\Entity\Product', 'p');
        $sql = "SELECT *,(((acos(sin(( :latitude *pi()/180)) * sin(( latitude *pi()/180))+cos(( :latitude *pi()/180)) * cos(( latitude *pi()/180)) * cos((( :longitude - longitude)*pi()/180))))*180/pi())*60*1.1515*1.609344) as distance
                FROM product as p
                Having  p.sold_out=0 AND activated=1
                ORDER BY distance ASC" ;
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('latitude',$latitude);
        $query->setParameter('longitude',$longitude);
        return $query->getResult();
    }

    public function getNearProducts($user,$distance){
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('AppBundle\Entity\Product', 'p');
        $sql = "SELECT *,(((acos(sin(( :latitude *pi()/180)) * sin(( latitude *pi()/180))+cos(( :latitude *pi()/180)) * cos(( latitude *pi()/180)) * cos((( :longitude - longitude)*pi()/180))))*180/pi())*60*1.1515*1.609344) as distance
                FROM product as p
                Having  distance <= :distance AND p.sold_out=0 AND p.activated=1
                ORDER BY distance ASC" ;
        $query = $this->_em->createNativeQuery($sql, $rsm);

        $query->setParameter('latitude',$user->getLatitude());
        $query->setParameter('longitude',$user->getLongitude());
        $query->setParameter('distance',$distance);


        return $query->getResult();
    }

    public function search($tag){

        $qb=$this->createQueryBuilder('u')
            ->Select('u')
            ->where('u.description like :description OR u.hashtags like :tag')
            ->andWhere('u.sold_out=0')
            ->andWhere('u.activated=1')
            ->orderBy('u.id')
            ->setParameter('description','%'.$tag.'%')
            ->setParameter('tag','%'.$tag.'%');
        return $qb->getQuery()->getResult();
    }



}
